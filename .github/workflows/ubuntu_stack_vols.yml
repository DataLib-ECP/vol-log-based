name: Ubuntu_stack_vols

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'case_studies/**'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'case_studies/**'

jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Set up dependencies
          run: |
            sudo apt-get update
            sudo apt-get -y install automake autoconf libtool libtool-bin m4 cmake
            # The MPICH installed on github actions is too slow
            # sudo apt-get install mpich
            # mpicc -v
            # zlib
            sudo apt-get -y install zlib1g-dev
        - name: Build MPICH
          run: |
            WORKDIR=$(pwd)
            rm -rf ${WORKDIR}/MPICH
            mkdir ${WORKDIR}/MPICH
            cd ${WORKDIR}/MPICH
            wget -q https://www.mpich.org/static/downloads/4.0.2/mpich-4.0.2.tar.gz
            gzip -dc mpich-4.0.2.tar.gz | tar -xf -
            cd mpich-4.0.2
            ./configure --prefix=${WORKDIR}/MPICH \
                        --silent \
                        --enable-romio \
                        --with-file-system=ufs \
                        --with-device=ch3:sock \
                        --disable-fortran \
                        CC=gcc
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -s -j 4 distclean >> qout 2>&1
            cd ${WORKDIR}
        - name: Install HDF5
          run: |
            WORKDIR=$(pwd)
            rm -rf ${WORKDIR}/HDF5
            mkdir ${WORKDIR}/HDF5
            cd ${WORKDIR}/HDF5
            wget -qc https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-1.13.2/src/hdf5-1.13.2.tar.gz
            tar -zxf hdf5-1.13.2.tar.gz
            cd hdf5-1.13.2
            ./configure --prefix=${WORKDIR}/HDF5 \
                        --silent \
                        --disable-fortran \
                        --disable-tests \
                        --enable-parallel \
                        --enable-threadsafe \
                        --enable-unsupported \
                        --enable-build-mode=production \
                        CC=${WORKDIR}/MPICH/bin/mpicc
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -s -j 4 distclean >> qout 2>&1
            cd ${WORKDIR}
        - name: Install NetCDF
          run: |
            WORKDIR=$(pwd)
            rm -rf ${WORKDIR}/NetCDF
            mkdir ${WORKDIR}/NetCDF
            cd ${WORKDIR}/NetCDF
            wget -qc https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.7.4.tar.gz
            tar -zxf v4.7.4.tar.gz
            cd netcdf-c-4.7.4
            ./configure --prefix=${WORKDIR}/NetCDF \
                        --silent \
                        --disable-dap \
                        CC=${WORKDIR}/MPICH/bin/mpicc \
                        CPPFLAGS="-I${WORKDIR}/HDF5/include" \
                        LDFLAGS="-L${WORKDIR}/HDF5/lib" \
                        LIBS="-lhdf5"
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -s -j 4 distclean >> qout 2>&1
            cd ${WORKDIR}
        - name: Install Argobots
          run: |
            WORKDIR=$(pwd)
            ABT_DIR=${WORKDIR}/Argobots
            rm -rf ${ABT_DIR}
            mkdir ${ABT_DIR}
            cd ${ABT_DIR}
            git clone https://github.com/pmodels/argobots.git
            cd argobots
            ./autogen.sh
            ./configure --prefix=${ABT_DIR} \
                        --silent \
                        CC=${WORKDIR}/MPICH/bin/mpicc \
                        CXX=${WORKDIR}/MPICH/bin/mpicxx
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -s -j 4 distclean >> qout 2>&1
            cd ${WORKDIR}
        - name: Install Async VOL
          run: |
            WORKDIR=$(pwd)
            export ABT_DIR=${WORKDIR}/Argobots
            export HDF5_DIR=${WORKDIR}/HDF5
            export ASYNC_DIR=${WORKDIR}/Async
            export HDF5_ROOT=${HDF5_DIR}
            rm -rf ${ASYNC_DIR}
            mkdir ${ASYNC_DIR}
            cd ${ASYNC_DIR}
            git clone https://github.com/hpc-io/vol-async.git
            cd vol-async
            mkdir build
            cd build
            CC=${WORKDIR}/MPICH/bin/mpicc \
              CXX=${WORKDIR}/MPICH/bin/mpicxx \
              cmake .. -DCMAKE_INSTALL_PREFIX=${ASYNC_DIR}
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            cd ${WORKDIR}
        - name: Install Cache VOL
          run: |
            WORKDIR=$(pwd)
            export ABT_DIR=${WORKDIR}/Argobots
            export HDF5_DIR=${WORKDIR}/HDF5
            export ASYNC_DIR=${WORKDIR}/Async
            export CAHCE_DIR=${WORKDIR}/Cache
            export HDF5_ROOT=${HDF5_DIR}
            rm -rf ${CAHCE_DIR}
            mkdir ${CAHCE_DIR}
            cd ${CAHCE_DIR}
            git clone https://github.com/hpc-io/vol-cache.git
            cd vol-cache
            mkdir build
            cd build
            CC=${WORKDIR}/MPICH/bin/mpicc \
              CXX=${WORKDIR}/MPICH/bin/mpicxx \
              HDF5_VOL_DIR=${ASYNC_DIR} \
              cmake .. -DCMAKE_INSTALL_PREFIX=${CAHCE_DIR}
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            cd ${WORKDIR}
        - name: Build and test Log-layout based VOL
          run: |
            WORKDIR=$(pwd)
            LOGVOL_DIR=${WORKDIR}/log_vol_install
            autoreconf -i
            ./configure --with-hdf5=${WORKDIR}/HDF5 \
                        --enable-test-netcdf4=${WORKDIR}/NetCDF \
                        --enable-test-openpmd \
                        --enable-test-hdf5-iotest \
                        --prefix=${LOGVOL_DIR} \
                        --with-mpi=${WORKDIR}/MPICH
            # Do NOT test QMCPACK, as it requires FFTW which fails to build
            make -j 4
            # Do NOT parallel build, cmake for external tests can fail
            make tests
            make check
            make ptest
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -j4 -s V=1 LIBTOOLFLAGS=--silent distcheck DISTCHECK_CONFIGURE_FLAGS="--silent --with-hdf5=${WORKDIR}/HDF5 --with-mpi=${WORKDIR}/MPICH"
            cd ${WORKDIR}
        - name: Test stacking Log VOL on top of Cache and Async VOL
          run: |
            WORKDIR=$(pwd)
            export ABT_DIR=${WORKDIR}/Argobots
            export ASYNC_DIR=${WORKDIR}/Async
            export CACHE_DIR=${WORKDIR}/Cache
            export HDF5_DIR=${WORKDIR}/HDF5
            export LOGVOL_DIR=${WORKDIR}/log_vol_install
            export HDF5_ROOT=${HDF5_DIR}
            export HDF5_PLUGIN_PATH=${LOGVOL_DIR}/lib:${CACHE_DIR}/lib:${ASYNC_DIR}/lib
            export LD_LIBRARY_PATH=${LOGVOL_DIR}/lib:${CACHE_DIR}/lib:${ASYNC_DIR}/lib:${ABT_DIR}/lib:${HDF5_DIR}/lib:${LD_LIBRARY_PATH}
            export HDF5_VOL_CONNECTOR="LOG under_vol=513;under_info={config=cache_1.cfg;under_vol=512;under_info={under_vol=0;under_info={}}}"
            cd ${WORKDIR}/tests/passthru
            make clean
            make tests
            make check
            make ptest
            cd ${WORKDIR}
        - name: Print log
          if: ${{ always() }}
          run: |
            WORKDIR=$(pwd)
            cat ${WORKDIR}/config.log
            cat ${WORKDIR}/tests/basic/*.log
            cat ${WORKDIR}/tests/dynamic/*.log
            cat ${WORKDIR}/tests/read_regular/*.log
            cat ${WORKDIR}/tests/passthru/*.log
            cat ${WORKDIR}/tests/testcases/*.log
            cat ${WORKDIR}/tests/nc4/*.log
            cat ${WORKDIR}/tests/external/hdf5_iotest/*.log
            cat ${WORKDIR}/tests/external/openpmd/*.log
            cat ${WORKDIR}/examples/*.log
            cat ${WORKDIR}/examples/hdf5_examples/*.log
            cat ${WORKDIR}/utils/*/*.log

