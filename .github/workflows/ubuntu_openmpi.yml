name: Ubuntu_openmpi

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'case_studies/**'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'case_studies/**'

jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up dependencies
          run: |
            sudo apt-get update
            sudo apt-get install automake autoconf libtool libtool-bin m4
            # zlib
            sudo apt-get install zlib1g-dev
            # mpi
            sudo apt-get install openmpi-bin openmpi-common libopenmpi-dev libgtk2.0-dev
            echo "---- location of OpenMPI C compiler ----"
            which mpicc
        - name: Install HDF5
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install HDF5 on ${GITHUB_WORKSPACE}/HDF5"
            rm -rf HDF5
            mkdir HDF5
            cd HDF5
            VERSION=1.13.2
            wget -cq https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-${VERSION}/src/hdf5-${VERSION}.tar.gz
            tar -zxf hdf5-${VERSION}.tar.gz
            cd hdf5-${VERSION}
            ./configure --prefix=${GITHUB_WORKSPACE}/HDF5 \
                        --silent \
                        --enable-hl \
                        --enable-parallel \
                        --enable-build-mode=production \
                        --disable-doxygen-doc \
                        --disable-doxygen-man \
                        --disable-doxygen-html \
                        --disable-tests \
                        --disable-fortran \
                        CC=mpicc
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -s -j 4 distclean >> qout 2>&1
        - name: Dump config.log if HDF5 fails to build
          if: ${{ failure() }}
          run: |
            VERSION=1.13.2
            cat ${GITHUB_WORKSPACE}/HDF5/hdf5-${VERSION}/config.log
        - name: Install NetCDF
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install NetCDF-C on ${GITHUB_WORKSPACE}/NetCDF"
            rm -rf NetCDF
            mkdir NetCDF
            cd NetCDF
            VERSION=4.9.0
            wget -cq https://github.com/Unidata/netcdf-c/archive/refs/tags/v${VERSION}.tar.gz
            tar -zxf v${VERSION}.tar.gz
            cd netcdf-c-${VERSION}
            ./configure --prefix=${GITHUB_WORKSPACE}/NetCDF \
                        --silent \
                        --disable-dap \
                        --disable-nczarr \
                        --disable-nczarr-filters \
                        --disable-filter-testing \
                        --disable-shared \
                        CC=mpicc \
                        CPPFLAGS="-I${GITHUB_WORKSPACE}/HDF5/include" \
                        LDFLAGS="-L${GITHUB_WORKSPACE}/HDF5/lib" \
                        LIBS="-lhdf5"
            make -s LIBTOOLFLAGS=--silent V=1 -j 4 install > qout 2>&1
            make -s -j 4 distclean >> qout 2>&1
        - name: Dump config.log if NetCDF4 fails to build
          if: ${{ failure() }}
          run: |
            VERSION=4.9.0
            cat ${GITHUB_WORKSPACE}/NetCDF/netcdf-c-${VERSION}/config.log            
        - name: Test log VOL
          run: |
            cd ${GITHUB_WORKSPACE}
            echo ">>>>>>>> autoreconf -i"
            autoreconf -i
            echo ">>>>>>>> ./configure --with-hdf5=${GITHUB_WORKSPACE}/HDF5 \
                        --enable-test-netcdf4=${GITHUB_WORKSPACE}/NetCDF \
                        --enable-test-hdf5-iotest \
                        TESTMPIRUN="mpiexec --oversubscribe -n NP""
            ./configure --with-hdf5=${GITHUB_WORKSPACE}/HDF5 \
                        --enable-test-netcdf4=${GITHUB_WORKSPACE}/NetCDF \
                        --enable-test-hdf5-iotest \
                        TESTMPIRUN="mpiexec --oversubscribe -n NP"
            # Do NOT test QMCPACK, as it requires FFTW which fails to build
            echo ">>>>>>>> make -j 4"
            make -j 4
            # Do NOT parallel build, cmake for external tests can fail
            echo ">>>>>>>> make tests"
            make tests
            echo ">>>>>>>> make check"
            make check
            echo ">>>>>>>> make ptest"
            make ptest
            echo ">>>>>>>> make -j4 -s V=1 LIBTOOLFLAGS=--silent distcheck DISTCHECK_CONFIGURE_FLAGS="--silent --with-hdf5=${GITHUB_WORKSPACE}/HDF5""
            make -j4 -s V=1 LIBTOOLFLAGS=--silent distcheck DISTCHECK_CONFIGURE_FLAGS="--silent --with-hdf5=${GITHUB_WORKSPACE}/HDF5"
        - name: Print log
          if: ${{ always() }}
          run: |
            cat ${GITHUB_WORKSPACE}/config.log
            ls -laht ${GITHUB_WORKSPACE}
            [ -f ${GITHUB_WORKSPACE}/H5VL_log-1.3.0/_build/sub/config.log ] && cat ${GITHUB_WORKSPACE}/H5VL_log-1.3.0/_build/sub/config.log
            cat ${GITHUB_WORKSPACE}/tests/basic/*.log
            cat ${GITHUB_WORKSPACE}/tests/dynamic/*.log
            cat ${GITHUB_WORKSPACE}/tests/testcases/*.log
            cat ${GITHUB_WORKSPACE}/tests/nc4/*.log
            cat ${GITHUB_WORKSPACE}/tests/external/hdf5_iotest/*.log
            # cat ${GITHUB_WORKSPACE}/tests/external/openpmd/*.log
            cat ${GITHUB_WORKSPACE}/examples/*.log
            cat ${GITHUB_WORKSPACE}/examples/hdf5_examples/*.log
            cat ${GITHUB_WORKSPACE}/utils/*/*.log

